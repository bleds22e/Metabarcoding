source('C:/Users/ellen.bledsoe/Dropbox/Portal/PORTAL_primary_data/Rodent/Documents/compare_raw_data.r')
source('C:/Users/ellen.bledsoe/Dropbox/Portal/PORTAL_primary_data/Rodent/Documents/general_error_check.r')
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", header = TRUE)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", header = TRUE, sep = " ")
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt")
core_sat <- read.csv("C:/Users/ellen.bledsoe/Downloads/analyze.txt")
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = "tab")
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = "")
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = " ")
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = ",")
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = ",", header = TRUE)
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = "\t", header = TRUE)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/savedrecs.txt", sep = "\t", header = TRUE)
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/savedrecs.txt", sep = "\", header = TRUE)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/savedrecs.txt", sep = "", header = TRUE)
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/savedrecs.txt", sep = ",", header = TRUE)
View(core_sat)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/savedrecs.txt", sep = " ", header = TRUE)
core_sat <- read.table("C:/Users/ellen.bledsoe/Downloads/analyze.txt", sep = "\t", col.names = c("Authors", "records", "% of 739"), fill = FALSE, strip.white = TRUE)
library(dplyr)
setwd("C:/Users/ellen.bledsoe/Desktop/Git/Metagenomics")
noblast = read.csv("./Plants/ITS_no_blast.csv", stringsAsFactors = FALSE)
OTUs = noblast %>% select(OTU.ID)
allITSseqs = read.csv("./Plants/ITS_from_fna.csv", stringsAsFactors = FALSE)
noblast_OTUs = allITSseqs %>% filter(OTU_its %in% OTUs$OTU.ID)
OTU_refset = noblast_OTUs %>% filter(OTU_its %in% c("OTU1","OTU101", "OTU3"))
completed_blasts = read.csv("NoBlast_blastoutput.csv", stringsAsFactors = FALSE)
completed_OTUs = unique(completed_blasts$OTU.ID)
OTUs_forBLAST = OTU_refset %>% filter(!(OTU_its %in% completed_OTUs))
source("https://bioconductor.org/biocLite.R")
biocLite("annotate")
library(annotate)
file = c()
num_seq = nrow(OTUs_forBLAST)
for(i in 1:num_seq){
print(paste("Number of sequences remaining:",num_seq-(i-1),sep=" "))
header = as.character(paste(">",OTUs_forBLAST$OTU_its[i], sep=""))
data = as.character(paste(header,OTUs_forBLAST$sequence_its[i],sep="\n"))
output = blastSequences(x=data,timeout = 220,
hitListSize = 20, as='data.frame')
file = rbind(file,output)
print(paste(OTUs_forBLAST$OTU_its[i], "complete", sep = " "))
}
View(completed_blasts)
View(OTU_refset)
OTUs_forBLAST = noblast_OTUs %>% filter(!(OTU_its %in% completed_OTUs))
library(annotate)
file = c()
num_seq = nrow(OTUs_forBLAST)
for(i in 1:num_seq){
print(paste("Number of sequences remaining:",num_seq-(i-1),sep=" "))
header = as.character(paste(">",OTUs_forBLAST$OTU_its[i], sep=""))
data = as.character(paste(header,OTUs_forBLAST$sequence_its[i],sep="\n"))
output = blastSequences(x=data,timeout = 220,
hitListSize = 20, as='data.frame')
file = rbind(file,output)
print(paste(OTUs_forBLAST$OTU_its[i], "complete", sep = " "))
}
names(file)[3] = 'OTU.ID'
names(file)[4] = 'Query.length'
names(file)[25] = 'Hsp.length'
clean.file = dplyr::select(file, OTU.ID, Query.length, Hit_id, Hit_def,
Hit_len, Hsp_evalue,
Hsp_identity, Hsp.length)
clean.file = clean.file %>% mutate_each_(funs(as.integer), c("Query.length","Hit_len",
"Hsp_identity","Hsp.length"))
clean.file = clean.file %>% mutate_each_(funs(as.numeric), "Hsp_evalue")
clean.file = clean.file %>% mutate(identity_percent = 100* (Hsp_identity/Hsp.length),
Query.cover = 100* (Hsp.length/Query.length))
completed_blasts = rbind(completed_blasts,clean.file)
View(completed_blasts)
write.csv(completed_blasts, "NoBlast_blastoutput.csv", row.names=FALSE)
write.csv(completed_blasts, "./Plants/NoBlast_blastoutput.csv", row.names=FALSE)
completed_blasts = read.csv("NoBlast_blastoutput.csv", stringsAsFactors = FALSE)
completed_OTUs = unique(completed_blasts$OTU.ID)
OTUs_forBLAST = noblast_OTUs %>% filter(!(OTU_its %in% completed_OTUs))
file = c()
num_seq = nrow(OTUs_forBLAST)
for(i in 1:num_seq){
print(paste("Number of sequences remaining:",num_seq-(i-1),sep=" "))
header = as.character(paste(">",OTUs_forBLAST$OTU_its[i], sep=""))
data = as.character(paste(header,OTUs_forBLAST$sequence_its[i],sep="\n"))
output = blastSequences(x=data,timeout = 220,
hitListSize = 20, as='data.frame')
file = rbind(file,output)
print(paste(OTUs_forBLAST$OTU_its[i], "complete", sep = " "))
}
names(file)[3] = 'OTU.ID'
names(file)[4] = 'Query.length'
names(file)[25] = 'Hsp.length'
clean.file = dplyr::select(file, OTU.ID, Query.length, Hit_id, Hit_def,
Hit_len, Hsp_evalue,
Hsp_identity, Hsp.length)
clean.file = clean.file %>% mutate_each_(funs(as.integer), c("Query.length","Hit_len",
"Hsp_identity","Hsp.length"))
clean.file = clean.file %>% mutate_each_(funs(as.numeric), "Hsp_evalue")
clean.file = clean.file %>% mutate(identity_percent = 100* (Hsp_identity/Hsp.length),
Query.cover = 100* (Hsp.length/Query.length))
completed_blasts = rbind(completed_blasts,clean.file)
write.csv(completed_blasts, "./Plants/NoBlast_blastoutput.csv", row.names=FALSE)
