{
    "collab_server" : "",
    "contents" : "# ITS duplicates through BLAST\n# Ellen Bledsoe\n# May 2017\n\nlibrary(dplyr)\n\n################################################################################\n# GET UNIQUE OTUs for DUPLICATES in ITS BLAST FILE\n\n# load BLAST file and clean\nblast <- read.csv(\"./Plants/ITS_blast.csv\", header = TRUE, na.strings = \"\")\nblast <- select(blast, -Sum)\nblast <- blast[-c(463:464),]\n\n# pull out ConsensusLineage\ntaxa_its <- select(blast, OTU.ID, ConsensusLineage)\n\n# make dataframe with only duplicate lineages\ndups <- taxa_its$ConsensusLineage\ndups <- as.data.frame(dups[duplicated(dups)])\ncolnames(dups) <- \"ConsensusLineage\"\n\n# join with OTU.ID to get all unique combinations\njoined <- semi_join(taxa_its, dups)\n\nfor(this_level in c('k','p','c','o','f','g','s')){\n  # separate taxa into columns\n  step_one=sapply(strsplit(as.character(joined$ConsensusLineage), paste0(this_level,'__')), '[', 2)\n  step_two=sapply(strsplit(step_one, ';'), '[', 1)\n  joined[,this_level]=step_two\n}\n\njoined <- select(joined, -ConsensusLineage) %>%\n  rename(Family = f, Genus = g, SciName = s) %>% \n  filter(k != \"Viruses\")\n\n################################################################################\n# MATCH OTU.ID w/ SEQUENCE\n\nseq <- read.csv(\"./SequencedData/Plants/ITS_sequences_from_fna.csv\", header = T, stringsAsFactors = F)\nseq <- rename(seq, OTU.ID = OTU_its)\nOTU_for_dups <- as.character(joined$OTU.ID)\nseq_to_BLAST <- filter(seq, OTU.ID %in% OTU_for_dups)\n\n################################################################################\n# RUN THROUGH BLAST \n#   - code from SKME\n\n# load file for completed blasts and filter out\ncompleted_blasts = read.csv(\"./SequencedData/Plants/ITS_reBlast_output.csv\", stringsAsFactors = FALSE)\ncompleted_OTUs = unique(completed_blasts$OTU.ID)\nOTUs_forBLAST = seq_to_BLAST %>% filter(!(OTU.ID %in% completed_OTUs))\n\n# load library\n# source(\"https://bioconductor.org/biocLite.R\")\n# biocLite(\"annotate\")\nlibrary(annotate)\n\n# queries BLAST\n#   - Pastes OTU ID and sequence together for a fasta format\n#   - Submits to BLAST and records output\n\nfile = c()\nnum_seq = nrow(OTUs_forBLAST)\nfor(i in 1:num_seq){\n  print(paste(\"Number of sequences remaining:\",num_seq-(i-1),sep=\" \"))\n  header = as.character(paste(\">\",OTUs_forBLAST$OTU.ID[i], sep=\"\"))\n  data = as.character(paste(header,OTUs_forBLAST$sequence_its[i],sep=\"\\n\"))\n  output = blastSequences(x=data, timeout = 220,\n                          hitListSize = 20, as='data.frame')\n  file = rbind(file, output)\n  print(paste(OTUs_forBLAST$OTU_its[i], \"complete\", sep = \" \"))\n}\n\n# add desired BLAST output to .csv file with info from previous BLASTs\n#   - formats and writes table from BLAST\n#   - selects & formats only relevant columns\n#   - calculates identity% & query coverage\n\nnames(file)[3] = 'OTU.ID'\nnames(file)[4] = 'Query.length'\nnames(file)[25] = 'Hsp.length'\n\nclean.file = dplyr::select(file, OTU.ID, Query.length, Hit_id, Hit_def, Hit_len, Hsp_evalue, Hsp_identity, Hsp.length)\nclean.file = mutate_each_(clean.file, funs(as.integer), \n                          c(\"Query.length\", \"Hit_len\", \"Hsp_identity\", \"Hsp.length\"))\nclean.file = mutate_each_(clean.file, funs(as.numeric), \"Hsp_evalue\")\n\nclean.file = mutate(clean.file, identity_percent = 100 * (Hsp_identity / Hsp.length), Query.cover = 100 * (Hsp.length / Query.length))\n\n# append new data to old\ncompleted_blasts = rbind(completed_blasts, clean.file)\n\n# overwrite to include appended data\nwrite.csv(completed_blasts, \"./SequencedData/Plants/ITS_reBLAST_output.csv\", row.names = FALSE)\n\n",
    "created" : 1496177143143.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "397530778",
    "id" : "CBA3FE1C",
    "lastKnownWriteTime" : 1496336061,
    "last_content_update" : 1496336061039,
    "path" : "~/Documents/Git/Metagenomics/ITS_reBLASTed_script.R",
    "project_path" : "ITS_reBLASTed_script.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}